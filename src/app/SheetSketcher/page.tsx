"use client";

import React, { useCallback, useState } from "react";
import Link from "next/link";

type UploadedFile = {
  id: string;
  name: string;
  size: number;
  type: string;
  file: File;
};

export default function SheetSketcherPage() {
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const [message, setMessage] = useState<string | null>(null);

  const onFiles = useCallback((incoming: FileList | null) => {
    if (!incoming) return;
    const arr = Array.from(incoming).map((f) => ({
      id: `${Date.now()}-${f.name}`,
      name: f.name,
      size: f.size,
      type: f.type,
      file: f,
    }));
    setFiles((s) => [...arr, ...s]);
    setMessage(null);
  }, []);

  const onDrop: React.DragEventHandler = (e) => {
    e.preventDefault();
    onFiles(e.dataTransfer.files);
  };
  const onDragOver: React.DragEventHandler = (e) => {
    e.preventDefault();
  };

  const requestConvert = async (f: UploadedFile) => {
    // UI-only placeholder: simulate an API request and show mock result
    setMessage(`Preparing "${f.name}" for conversion...`);
    await new Promise((r) => setTimeout(r, 900));
    setMessage(`Conversion complete (UI mock): "${f.name}" ‚Üí sheet preview ready.`);
    setSelectedId(f.id);
  };

  const downloadMockPDF = (f: UploadedFile) => {
    // create a tiny placeholder PDF-like blob (actually a text file named .pdf) for UI demo
    const blob = new Blob([
      `Mock printable score for ${f.name}\nGenerated by SoundSketch UI-only demo.`,
    ]);
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${f.name.replace(/\.[^.]+$/, "")}-score.pdf`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <main>
      <div className="container mx-auto px-6 py-12">
        <nav className="mb-6 flex items-center justify-between">
          <h1 className="text-3xl font-bold">Sheet Sketcher</h1>
          <Link href="/" className="text-sm text-slate-300 hover:underline">
            ‚Üê Home
          </Link>
        </nav>

        <section className="grid gap-8 md:grid-cols-2">
          <div>
            <div
              onDrop={onDrop}
              onDragOver={onDragOver}
              className="flex h-56 w-full flex-col items-center justify-center gap-3 rounded-xl border-2 border-dashed border-slate-600 bg-white/2 p-6 text-center transition hover:border-slate-400"
            >
              <div className="text-4xl">üì•</div>
              <p className="text-lg font-medium">Drop MIDI or WAV here</p>
              <p className="text-sm text-slate-300">Or</p>
              <label className="cursor-pointer rounded-md bg-[hsl(260,100%,70%)]/20 px-4 py-2 text-sm text-[hsl(260,100%,70%)] hover:bg-[hsl(260,100%,70%)]/30">
                Select file
                <input
                  onChange={(e) => onFiles(e.target.files)}
                  className="hidden"
                  type="file"
                  accept="audio/*,.mid,.midi"
                />
              </label>
            </div>

            <div className="mt-6">
              <h3 className="mb-2 text-lg font-semibold">Uploaded files</h3>
              <div className="flex max-h-60 flex-col gap-2 overflow-auto">
                {files.length === 0 && (
                  <div className="text-sm text-slate-400">No files yet.</div>
                )}
                {files.map((f) => (
                  <div
                    key={f.id}
                    className={`flex items-center justify-between gap-4 rounded-md p-3 hover:bg-white/3 ${
                      selectedId === f.id ? "ring-2 ring-[hsl(260,100%,70%)]" : ""
                    }`}
                  >
                    <div>
                      <div className="font-medium">{f.name}</div>
                      <div className="text-xs text-slate-300">
                        {(f.size / 1024).toFixed(1)} KB ‚Ä¢ {f.type ?? "unknown"}
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={() => requestConvert(f)}
                        className="rounded-full bg-white/5 px-3 py-1 text-sm transition hover:bg-white/10"
                      >
                        Generate
                      </button>
                      <button
                        onClick={() => downloadMockPDF(f)}
                        className="rounded-full bg-white/5 px-3 py-1 text-sm transition hover:bg-white/10"
                      >
                        Download PDF
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <aside className="rounded-xl bg-white/3 p-6">
            <h3 className="mb-4 text-xl font-semibold">Score preview</h3>
            {selectedId ? (
              <div>
                <div className="mb-4 rounded-md bg-gradient-to-b from-white/5 to-white/3 p-4 text-slate-100">
                  {/* Minimal mock staff with a few notes as SVG for visual polish */}
                  <svg viewBox="0 0 800 200" className="w-full">
                    <defs>
                      <linearGradient id="g" x1="0" x2="1">
                        <stop offset="0" stopColor="#ffd6f7" stopOpacity="0.2" />
                        <stop offset="1" stopColor="#cde7ff" stopOpacity="0.05" />
                      </linearGradient>
                    </defs>
                    <rect width="100%" height="100%" fill="url(#g)" />
                    {/* staff lines */}
                    {[30, 50, 70, 90, 110].map((y) => (
                      <line key={y} x1={40} x2={760} y1={y} y2={y} stroke="#e6e7ea" strokeOpacity={0.25} />
                    ))}
                    {/* mock notes */}
                    <ellipse cx={140} cy={90} rx={12} ry={9} fill="#fff" />
                    <rect x={150} y={32} width={4} height={58} fill="#fff" />
                    <ellipse cx={240} cy={70} rx={10} ry={8} fill="#fff" />
                    <rect x={250} y={14} width={4} height={58} fill="#fff" />
                    <ellipse cx={360} cy={90} rx={12} ry={9} fill="#fff" />
                    <rect x={370} y={32} width={4} height={58} fill="#fff" />
                  </svg>
                </div>
                <div className="text-sm text-slate-200">
                  This is a UI-only score preview. A real backend would return
                  MusicXML or a PDF to render precise notation.
                </div>
              </div>
            ) : (
              <div className="text-center text-slate-300">
                No preview yet ‚Äî generate a mock score after uploading and
                clicking Generate.
              </div>
            )}

            {message && <div className="mt-4 text-sm text-slate-200">{message}</div>}
          </aside>
        </section>
      </div>
    </main>
  );
}
